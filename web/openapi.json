{
  "openapi": "3.1.0",
  "info": {
    "title": "GPT User Authentication API",
    "description": "API for user registration, authentication, and profile management in TeqFW applications integrated with ChatGPT.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://SET.YOUR.SERVER.HERE/"
    }
  ],
  "paths": {
    "/web-api-service/Fl64_Gpt_User_Shared_Web_Api_SignUp_Init": {
      "post": {
        "summary": "Initialize user sign-up",
        "description": "Begins user sign-up by collecting email, consent, locale, and passphrase. Creates a user record with 'pending verification' status, generates a PIN, and sends an email verification token. PIN and passphrase must be securely stored by the client.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "operationId": "userSignUpInit",
        "requestBody": {
          "description": "Data required to initialize the user sign-up process. The email will be used for communication and account verification. Consent must be set to `true` to proceed. The passphrase is used as a personal authentication token alongside the PIN.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "The user's email address used for account verification and communication. It must be in a valid email format and only include the address part.",
                    "format": "email",
                    "example": "user@example.com"
                  },
                  "isConsent": {
                    "type": "boolean",
                    "description": "A flag indicating whether the user has agreed to data processing. This must be set to `true`. Sending `false` will result in an invalid request.",
                    "example": true
                  },
                  "locale": {
                    "type": "string",
                    "description": "The user's preferred locale for application interaction, formatted according to BCP 47. Determines the language and format of the user interface.",
                    "example": "en-US"
                  },
                  "passPhrase": {
                    "type": "string",
                    "description": "A secret passphrase chosen by the user. It serves as an authentication token along with the PIN. Passphrases must be meaningful, easy to pronounce, and suitable for voice interfaces.",
                    "minLength": 8,
                    "maxLength": 128,
                    "example": "sunny day morning"
                  }
                },
                "required": ["email", "isConsent", "passPhrase"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The sign-up process was initiated successfully. The response includes the user's PIN (inactive until email verification is completed) and instructions for the next steps.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resultCode": {
                      "type": "string",
                      "enum": [
                        "CONSENT_REQUIRED",
                        "EMAIL_ALREADY_REGISTERED",
                        "SERVER_ERROR",
                        "SUCCESS"
                      ],
                      "description": "Indicates the outcome of the registration initiation. Possible values are: CONSENT_REQUIRED (consent not provided), EMAIL_ALREADY_REGISTERED (email already in use), SERVER_ERROR (an internal issue), SUCCESS (registration initiated)."
                    },
                    "pin": {
                      "type": "integer",
                      "description": "A unique numeric PIN assigned to the user during registration. This PIN remains inactive until the user's email is verified and is required for future authentication along with the passphrase.",
                      "example": 123456
                    },
                    "instructions": {
                      "type": "string",
                      "description": "Next-step instructions for the user to complete their registration. The instructions are translated into the user's preferred language.",
                      "example": "Please verify your email address by clicking the link we sent to your email."
                    }
                  },
                  "required": ["resultCode", "pin", "instructions"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. An unexpected issue occurred while processing the request. The user should retry later.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "A message indicating that the service is temporarily unavailable.",
                      "example": "Service unavailable. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/web-api-service/Fl64_Gpt_User_Shared_Web_Api_Test_Email": {
      "post": {
        "summary": "Send a test email to the user's registered address",
        "description": "This endpoint allows a registered user to send a test email to their registered email address. Authentication is performed using the user's PIN and passphrase. Optional fields for the email subject and message can be provided, or default values will be used.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "operationId": "sendTestEmail",
        "requestBody": {
          "description": "Data required to authenticate the user and send a test email to their registered email address.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "pin": {
                    "type": "integer",
                    "description": "The unique PIN assigned to the user during registration. Required for authentication.",
                    "example": 123456
                  },
                  "passPhrase": {
                    "type": "string",
                    "description": "The user's secret passphrase for authentication. This must match the passphrase provided during registration.",
                    "example": "my_secure_passphrase"
                  },
                  "subject": {
                    "type": "string",
                    "description": "The subject line of the email. If not provided, the service will use a default value.",
                    "example": "Test Email"
                  },
                  "message": {
                    "type": "string",
                    "description": "The body of the email. If not provided, the service will use a default message.",
                    "example": "Hello, this is a test email from our application!"
                  }
                },
                "required": ["pin", "passPhrase"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The email operation completed successfully or failed with an appropriate error message.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "resultCode": {
                      "type": "string",
                      "description": "Indicates the result of the operation. Possible values are: UNAUTHENTICATED, SERVICE_ERROR, SUCCESS.",
                      "enum": [
                        "UNAUTHENTICATED",
                        "SERVICE_ERROR",
                        "SUCCESS"
                      ]
                    },
                    "instructions": {
                      "type": "string",
                      "description": "A human-readable message describing the result of the operation. This message should be translated into the user's preferred language before being displayed.",
                      "example": "The email was successfully sent to the user's registered address."
                    }
                  },
                  "required": ["resultCode", "instructions"]
                }
              }
            }
          },
          "500": {
            "description": "Internal server error. An unexpected issue occurred while processing the request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "description": "A general error message indicating that the service is temporarily unavailable.",
                      "example": "Service unavailable. Please try again later."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/web-api-service/Fl64_Gpt_User_Shared_Web_Api_Update_Init": {
      "post": {
        "summary": "Initiate Profile Editing Process",
        "description": "Allows users to request a secure, single-use link for editing their profile. Users can identify themselves using their registered email or unique PIN. If both identifiers are provided, email takes precedence. The service sends the generated link to the user's email address.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "operationId": "userProfileUpdateInit",
        "requestBody": {
          "description": "Data required to initiate the profile editing process. Users must provide at least one identifier (email or PIN) to proceed.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address associated with the user's account. This is the primary identifier for initiating the profile editing process. If found, the system will send the profile editing link to this address.",
                    "example": "user@example.com"
                  },
                  "pin": {
                    "type": "integer",
                    "description": "The unique PIN assigned to the user during registration. Serves as an alternative identifier if the email is not provided or does not match any registered user.",
                    "example": 123456
                  }
                },
                "required": ["email"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The profile editing process was successfully initiated, and the link was sent to the user's registered email address.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instructions": {
                      "type": "string",
                      "description": "A human-readable message describing the result of the operation. Provides feedback on whether the profile editing link was successfully sent or if an error occurred. This message should be localized to the user's preferred language.",
                      "example": "The profile editing link was successfully sent to the user's registered email address."
                    },
                    "resultCode": {
                      "type": "string",
                      "description": "A code indicating the result of the profile editing initiation process. Used programmatically to determine the operation's success or failure.",
                      "enum": ["SUCCESS", "SERVER_ERROR"],
                      "example": "SUCCESS"
                    }
                  },
                  "required": ["instructions", "resultCode"]
                }
              }
            }
          },
          "403": {
            "description": "The request is forbidden due to missing or invalid Bearer token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "A message indicating that the request was not authorized due to missing or invalid Bearer token.",
                      "example": "Authorization failed: Bearer token is missing or invalid."
                    }
                  },
                  "required": ["message"]
                }
              }
            }
          },
          "500": {
            "description": "An unexpected server error occurred during the profile editing initiation process.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "instructions": {
                      "type": "string",
                      "description": "A human-readable message indicating that an error occurred during the process. Informs the user or application to retry the operation later.",
                      "example": "An unexpected server error occurred. Please try again later."
                    },
                    "resultCode": {
                      "type": "string",
                      "description": "A code indicating that a server error occurred. Allows the application to programmatically recognize the failure and take appropriate actions.",
                      "enum": ["SERVER_ERROR"],
                      "example": "SERVER_ERROR"
                    }
                  },
                  "required": ["instructions", "resultCode"]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "UUID",
        "description": "Authentication token provided as a Bearer token in the Authorization header. The token itself is a UUID. Example: 'Bearer 7d4c7311-82e4-4c67-bc5e-8а7d01c8ddec'."
      }
    }
  }
}
